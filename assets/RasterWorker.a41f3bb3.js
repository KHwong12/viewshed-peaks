var S=Object.defineProperty,d=Object.defineProperties;var p=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var h=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var f=(s,e,t)=>e in s?S(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t,c=(s,e)=>{for(var t in e||(e={}))h.call(e,t)&&f(s,t,e[t]);if(l)for(var t of l(e))x.call(e,t)&&f(s,t,e[t]);return s},u=(s,e)=>d(s,p(e));import{r as n,aa as m,l4 as N}from"./index.89a7b683.js";import{u as a}from"./PixelBlock.0233a4ee.js";import{f as O,P as y,N as J,s as b,v,y as P,B as g,c as B}from"./dataUtils.7972f2f0.js";import{x as w,d as z,L as k}from"./rasterProjectionHelper.d9c5b1bd.js";import{f as D}from"./utils.38a3607c.js";import"./LercCodec.95c0fb50.js";import"./colorUtils.c7035b36.js";class R{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),o=O(t,e.type);return Promise.resolve(n(o)&&o.toJSON())}async decode(e){const t=await y(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?m.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(n(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=J.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(n(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=b(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=v(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((o,r)=>{t.set(r,o==null?void 0:o.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(i=>i?new a(i):null),o=P(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo});if(!e.coefs)return o&&o.toJSON();const r=g(o,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return r&&r.toJSON()}async createStreamlinesMesh(e,t){const o={data:new Float32Array(e.flowData.buffer),width:e.flowData.width,height:e.flowData.height},{vertexData:r,indexData:i}=await B(e.rendererSettings,o,t.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:i.buffer},transferList:[r.buffer,i.buffer]}}async getProjectionOffsetGrid(e){const t=m.fromJSON(e.projectedExtent),o=m.fromJSON(e.srcBufferExtent);let r=null;e.datumTransformationStemps&&(r=new N({steps:e.datumTransformationStemps})),w(t.spatialReference,o.spatialReference,r)&&await z();const i=e.rasterTransform?D(e.rasterTransform):null;return k(u(c({},e),{projectedExtent:t,srcBufferExtent:o,datumTransformation:r,rasterTransform:i}))}}export{R as default};
