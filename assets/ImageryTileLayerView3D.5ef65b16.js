import{r as m,t as u,fr as P,w as E,U as c,A as z,h as F,E as I,bx as L,by as O,bz as N,fS as V,a_ as A,gO as G,gP as D}from"./vendor.d423bc92.js";import{w as j,j as H}from"./rasterProjectionHelper.e22294e9.js";import{d as M}from"./popupUtils.a905553f.js";import{i as $}from"./RefreshableLayerView.dc4ceb0c.js";import{a as k}from"./drapedUtils.0a78620b.js";const W=a=>{let i=class extends a{constructor(){super(...arguments),this._rasterFieldPrefix="Raster.",this.layer=null,this.view=null,this.fullExtent=null,this.tileInfo=null,this.datumTransformation=null}get hasTilingEffects(){return this.layer.renderer&&"dynamicRangeAdjustment"in this.layer.renderer&&this.layer.renderer.dynamicRangeAdjustment}async fetchPopupFeatures(e,r){const{layer:t}=this;if(!e)return Promise.reject(new c("imageryTileLayerView:fetchPopupFeatures","Nothing to fetch without area",{layer:t}));const{popupEnabled:s}=t,n=M(t,r);if(!s||!z(n))throw new c("imageryTileLayerView:fetchPopupFeatures","Missing required popupTemplate or popupEnabled",{popupEnabled:s,popupTemplate:n});const l=[],{value:o,magdirValue:d}=await t.identify(e,{timeExtent:this.timeExtent});let v="";if(o&&o.length){var x,T;v=t.type==="imagery-tile"&&t.hasStandardTime()&&o[0]!=null?o.map(b=>t.getStandardTimeValue(b)).join(", "):o.join(", ");const f={ObjectId:0},R="Raster.ServicePixelValue";f[R]=this._formatAttributeValue(v,R);const w=(x=t.rasterInfo)==null||(T=x.attributeTable)==null?void 0:T.features;if(w&&w.length>0){const b=w.filter(h=>{const y=h.attributes.value||h.attributes.Value||h.attributes.VALUE;return String(y)===v});if(b.length>0){const h=b[0];if(h){for(const y in h.attributes)if(h.attributes.hasOwnProperty(y)){const _=this._rasterFieldPrefix+y;f[_]=this._formatAttributeValue(h.attributes[y],_)}}}}const S=t.rasterInfo.dataType;S!=="vector-magdir"&&S!=="vector-uv"||(f["Raster.Magnitude"]=d==null?void 0:d[0],f["Raster.Direction"]=d==null?void 0:d[1]);const g=new F(this.fullExtent.clone(),null,f);g.layer=t,g.sourceLayer=g.layer,l.push(g)}return l}updateFullExtent(){const e=this.layer.tileInfo;if(!(e&&e.spatialReference))return Promise.reject(new c("layerview:tiling-information-missing","The layer doesn't provide tiling information",{layer:this.layer}));if(I(this.layer.fullExtent))return Promise.reject(new c("layerview:extent-missing","The layer doesn't provide a full extent.",{layer:this.layer}));const r=j(this.layer.fullExtent,this.view.spatialReference,!1),t=H(this.layer.fullExtent,this.view.spatialReference,r);return t==null?Promise.reject(new c("layerview:projection-not-supported","The layer extent cannot be projected to the view's spatial reference",{layer:this.layer})):(this._set("fullExtent",t),this.datumTransformation||(this.datumTransformation=j(this.layer.fullExtent,this.view.spatialReference,!0)),Promise.resolve())}_formatAttributeValue(e,r){if(typeof e=="string"){const t=this.layer.popupTemplate&&this.layer.popupTemplate.fieldInfos,s=this._getFieldInfo(t,r),n=s&&s.format;if(n){let l,o;return e.trim().indexOf(",")>-1?(l=",",o=l+" ",this._formatDelimitedString(e,l,o,n)):e.trim().indexOf(" ")>-1?(l=o=" ",this._formatDelimitedString(e,l,o,n)):this._formatNumberFromString(e,n)}}return e}_getFieldInfo(e,r){if(!e||!e.length||!r)return;const t=r.toLowerCase();let s;return e.some(n=>!(!n.fieldName||n.fieldName.toLowerCase()!==t&&n.fieldName.toLowerCase()!==t.replace(/ /g,"_"))&&(s=n,!0)),s}_formatDelimitedString(e,r,t,s){return e&&r&&t&&s?e.trim().split(r).map(n=>this._formatNumberFromString(n,s)).join(t):e}_formatNumberFromString(e,r){if(!e||!r)return e;const t=Number(e);return isNaN(t)?e:r.format(t)}};return m([u()],i.prototype,"layer",void 0),m([u(P)],i.prototype,"timeExtent",void 0),m([u()],i.prototype,"view",void 0),m([u()],i.prototype,"fullExtent",void 0),m([u()],i.prototype,"tileInfo",void 0),m([u({readOnly:!0})],i.prototype,"hasTilingEffects",null),i=m([E("esri.views.layers.ImageryTileLayerView")],i),i};let p=class extends W($(L(O(N)))){constructor(){super(...arguments),this.type="imagery-tile-3d",this.isAlignedMapTile=!0}initialize(){this.layer.increaseRasterJobHandlerUsage();const a=this.updateFullExtent();this.addResolvingPromise(a);const i=V(this.view,"basemapTerrain.tilingSchemeLocked").then(()=>{const e=this.view.basemapTerrain.tilingScheme,{tileInfo:r}=this.layer,t=["png","png24","png32","jpg","mixed"].indexOf(r.format)>-1&&e.compatibleWith(r);this.isAlignedMapTile=t;const s=t?r:e.toTileInfo();this._set("tileInfo",s),this.updatingHandles.add(this,"layer.renderer",()=>this.refresh()),this.updatingHandles.add(this,"layer.interpolation",()=>this.refresh()),this.updatingHandles.add(this,"layer.bandIds",()=>this.refresh()),this.updatingHandles.add(this,"layer.multidimensionalDefinition",()=>this.refresh())});this.addResolvingPromise(i)}destroy(){this.layer.decreaseRasterJobHandlerUsage(),this.view=null}get _blankTile(){const a=document.createElement("canvas"),i=a.getContext("2d"),[e,r]=this.tileInfo.size;return a.width=e,a.height=r,i.clearRect(0,0,e,r),i.getImageData(0,0,e,r)}get imageFormatIsOpaque(){return this.layer.tileInfo.format==="jpg"}get hasMixedImageFormats(){return this.layer.tileInfo.format==="mixed"}get dataLevelRange(){const a=this.tileInfo.lods,i=this.layer.tileInfo.lods,e=a[0].scale,r=i[i.length-1].scale;return this.levelRangeFromScaleRange(e,r)}async fetchTile(a,i,e,r){const t=this.tileInfo,s=this._canSymbolizeInWebGL(),n={tileInfo:t,requestRawData:s,signal:A(r.signal),requestAsImageElement:this.isAlignedMapTile},l=await this.layer.fetchTile(a,i,e,n);if(l instanceof HTMLImageElement)return l;let o=l&&l.pixelBlock;if(I(o))return this._blankTile;if(!s&&(o=await this.layer.applyRenderer(l),I(o)))return this._blankTile;const d=new G([a,i,e],o,t.size[0],t.size[1]);return s?(d.symbolizerRenderer=this.layer.symbolizer.rendererJSON,d.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(a)),d.transformGrid=l.transformGrid):d.isRendereredSource=!0,d.interpolation=this.layer.interpolation,d.bandIds=this.layer.bandIds,d}_getSymbolizerOptions(a){const i=this.tileInfo.lodAt(a).resolution;return{pixelBlock:null,isGCS:this.view.spatialReference.isGeographic,resolution:{x:i,y:i},bandIds:this.layer.bandIds}}ensureSymbolizerParameters(a){this._canSymbolizeInWebGL()&&JSON.stringify(a.symbolizerRenderer)!==JSON.stringify(this.layer.symbolizer.rendererJSON)&&(a.symbolizerParameters=this.layer.symbolizer.generateWebGLParameters(this._getSymbolizerOptions(a.lij[0])))}createFetchPopupFeaturesQueryGeometry(a,i){return k(a,i,this.view)}refresh(){this.emit("data-changed")}async doRefresh(){this.suspended||this.emit("data-changed")}_canSymbolizeInWebGL(){return D().supportsTextureFloat&&this.layer.symbolizer.canRenderInWebGL}};m([u({readOnly:!0})],p.prototype,"_blankTile",null),m([u({readOnly:!0})],p.prototype,"imageFormatIsOpaque",null),m([u({readOnly:!0})],p.prototype,"hasMixedImageFormats",null),m([u({readOnly:!0})],p.prototype,"dataLevelRange",null),p=m([E("esri.views.3d.layers.ImageryTileLayerView3D")],p);const Q=p;export{Q as default};
