import{e as i,d as h,fd as x,i as c,x as m,aa as w}from"./index.89a7b683.js";import{V as g}from"./DynamicLayerView3D.6f0fb52b.js";import{l as P}from"./ExportWMSImageParameters.05f42349.js";import"./projectExtentUtils.c2292b8f.js";import"./ImageMaterialTechnique.971b25d8.js";import"./RefreshableLayerView.567b5392.js";const v=a=>{let e=class extends a{initialize(){this.exportImageParameters=new P({layer:this.layer})}destroy(){this.exportImageParameters.destroy(),this.exportImageParameters=null}get exportImageVersion(){var t;return(t=this.exportImageParameters)==null||t.commitProperty("version"),this.commitProperty("timeExtent"),(this._get("exportImageVersion")||0)+1}fetchPopupFeatures(t){const{layer:r}=this;if(!t)return Promise.reject(new m("wmslayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:r}));const{popupEnabled:o}=r;if(!o)return Promise.reject(new m("wmslayerview:fetchPopupFeatures","popupEnabled should be true",{popupEnabled:o}));const n=this.createFetchPopupFeaturesQuery(t);if(!n)return Promise.resolve([]);const{extent:p,width:s,height:l,x:y,y:f}=n;if(!(p&&s&&l))throw new m("wmslayerview:fetchPopupFeatures","WMSLayer does not support fetching features.",{extent:p,width:s,height:l});const d=r.fetchFeatureInfo(p,s,l,y,f);return Promise.resolve(d?[d]:[])}};return i([h()],e.prototype,"exportImageParameters",void 0),i([h({readOnly:!0})],e.prototype,"exportImageVersion",null),i([h()],e.prototype,"layer",void 0),i([h(x)],e.prototype,"timeExtent",void 0),e=i([c("esri.layers.mixins.WMSLayerView")],e),e};let u=class extends v(g){constructor(){super(...arguments),this.type="wms-3d"}initialize(){this.layer.supportsSpatialReference(this.view.spatialReference)||this.addResolvingPromise(Promise.reject(new m("layerview:spatial-reference-incompatible","The spatial references supported by this WMS layer are incompatible with the spatial reference of the view"))),this.updatingHandles.add(this.exportImageParameters,"version",()=>{this.updatingHandles.addPromise(this.refreshDebounced())})}createFetchPopupFeaturesQuery(a){const e=this.findExtentInfoAt(a),t=e.extent,r=new w(t[0],t[1],t[2],t[3],this._spatialReference),o=e.imageSize,n=o.width,p=o.height,s=r.width/n;return{extent:r,width:n,height:p,x:Math.round((a.x-r.xmin)/s),y:Math.round((r.ymax-a.y)/s)}}getFetchOptions(){return{timeExtent:this.timeExtent}}};i([h()],u.prototype,"suspended",void 0),u=i([c("esri.views.3d.layers.WMSLayerView3D")],u);const V=u;export{V as default};
