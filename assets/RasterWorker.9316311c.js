var u=Object.defineProperty,S=Object.defineProperties;var p=Object.getOwnPropertyDescriptors;var m=Object.getOwnPropertySymbols;var h=Object.prototype.hasOwnProperty,x=Object.prototype.propertyIsEnumerable;var c=(r,e,t)=>e in r?u(r,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[e]=t,f=(r,e)=>{for(var t in e||(e={}))h.call(e,t)&&c(r,t,e[t]);if(m)for(var t of m(e))x.call(e,t)&&c(r,t,e[t]);return r},d=(r,e)=>S(r,p(e));import{A as n,at as l,ln as b}from"./vendor.d423bc92.js";import{u as a}from"./PixelBlock.021d47c5.js";import{f as N,P as O,N as y,s as J,v as P,y as v,B,c as g}from"./dataUtils.ff8bda12.js";import{x as j,d as w,L as z}from"./rasterProjectionHelper.e22294e9.js";import{f as k}from"./utils.219f5e5f.js";import"./LercCodec.9e5bdb80.js";import"./colorUtils.c7035b36.js";class I{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),s=N(t,e.type);return Promise.resolve(n(s)&&s.toJSON())}async decode(e){const t=await O(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?l.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(n(t)&&t.toJSON())}async updateSymbolizer(e){var t;this.symbolizer=y.fromJSON(e.symbolizerJSON),e.histograms&&((t=this.symbolizer)==null?void 0:t.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(n(t)&&t.toJSON())}estimateStatisticsHistograms(e){const t=J(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=P(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,o)=>{t.set(o,s==null?void 0:s.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(i=>i?new a(i):null),s=v(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo});if(!e.coefs)return s&&s.toJSON();const o=B(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return o&&o.toJSON()}async createStreamlinesMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),width:e.flowData.width,height:e.flowData.height},{vertexData:o,indexData:i}=await g(e.rendererSettings,s,t.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:i.buffer},transferList:[o.buffer,i.buffer]}}async getProjectionOffsetGrid(e){const t=l.fromJSON(e.projectedExtent),s=l.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationStemps&&(o=new b({steps:e.datumTransformationStemps})),j(t.spatialReference,s.spatialReference,o)&&await w();const i=e.rasterTransform?k(e.rasterTransform):null;return z(d(f({},e),{projectedExtent:t,srcBufferExtent:s,datumTransformation:o,rasterTransform:i}))}}export{I as default};
