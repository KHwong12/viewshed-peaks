import{ku as m,eG as p,kv as g,kw as y,kx as w,er as f}from"./index.89a7b683.js";class I{constructor(){this.code=null,this.description=null}}class b{constructor(t){this.error=new I,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function d(e){return new b(e)}class v{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function j(e){return new v(e)}const u=new Set;function x(e,t,i,h=!1,a){u.clear();for(const r in i){const n=e.get(r);if(!n)continue;const l=i[r],s=k(n,l);if(s!==l&&a&&a.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:n,originalValue:l,sanitizedValue:s}}),u.add(n.name),n&&(h||n.editable)){const c=y(n,s);if(c)return d(w(c,n,s));t[n.name]=s}}for(const r of e.requiredFields)if(!u.has(r.name))return d(`missing required field "${r.name}"`);return null}function k(e,t){let i=t;return typeof t=="string"&&m(e)?i=parseFloat(t):t!=null&&p(e)&&typeof t!="string"&&(i=String(t)),g(i)}let o;function F(e,t){if(!e||!f(t))return e;if("rings"in e||"paths"in e){if(!o)throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function q(){return o||(o=await import("./geometryEngineJSON.1787cb60.js"),o)}async function P(e,t){!f(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await q()}export{j as c,x as d,F as h,d as u,P as y};
