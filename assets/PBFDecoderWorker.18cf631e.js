var y=Object.defineProperty,m=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var C=Object.prototype.hasOwnProperty,P=Object.prototype.propertyIsEnumerable;var d=(s,t,e)=>t in s?y(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e,c=(s,t)=>{for(var e in t||(t={}))C.call(t,e)&&d(s,e,t[e]);if(l)for(var e of l(t))P.call(t,e)&&d(s,e,t[e]);return s},p=(s,t)=>m(s,g(t));import{kz as b,gr as G,t as k,cz as A,f8 as v,kA as M,kq as R,fG as T,kB as x,kC as w,kD as Z}from"./index.89a7b683.js";function B(s,t){return t}function h(s,t,e,r){switch(e){case 0:return a(s,t+r,0);case 1:return s.originPosition==="lowerLeft"?a(s,t+r,1):S(s,t+r,1)}}function f(s,t,e,r){return e===2?a(s,t,2):h(s,t,e,r)}function L(s,t,e,r){return e===2?a(s,t,3):h(s,t,e,r)}function F(s,t,e,r){return e===3?a(s,t,3):f(s,t,e,r)}function a({translate:s,scale:t},e,r){return s[r]+e*t[r]}function S({translate:s,scale:t},e,r){return s[r]-e*t[r]}class D{constructor(t){this.options=t,this.geometryTypes=["point","multipoint","polyline","polygon"],this.previousCoordinate=[0,0],this.transform=null,this.applyTransform=B,this.lengths=[],this.currentLengthIndex=0,this.toAddInCurrentPath=0,this.vertexDimension=0,this.coordinateBuffer=null,this.coordinateBufferPtr=0,this.AttributesConstructor=function(){}}createFeatureResult(){return new b}finishFeatureResult(t){if(this.options.applyTransform&&(t.transform=null),this.AttributesConstructor=function(){},this.coordinateBuffer=null,this.lengths.length=0,!t.hasZ)return;const e=G(t.geometryType,this.options.sourceSpatialReference,t.spatialReference);if(!k(e))for(const r of t.features)e(r.geometry)}createSpatialReference(){return new A}addField(t,e){t.fields.push(v.fromJSON(e));const r=t.fields.map(o=>o.name);this.AttributesConstructor=function(){for(const o of r)this[o]=null}}addFeature(t,e){const r=this.options.maxStringAttributeLength?this.options.maxStringAttributeLength:0;if(r>0)for(const o in e.attributes){const n=e.attributes[o];typeof n=="string"&&n.length>r&&(e.attributes[o]="")}t.features.push(e)}addQueryGeometry(t,e){const{queryGeometry:r,queryGeometryType:o}=e,n=M(r.clone(),r,!1,!1,this.transform),u=R(n,o,!1,!1);let i=null;switch(o){case"esriGeometryPoint":i="point";break;case"esriGeometryPolygon":i="polygon";break;case"esriGeometryPolyline":i="polyline";break;case"esriGeometryMultipoint":i="multipoint"}u.type=i,t.queryGeometryType=o,t.queryGeometry=u}prepareFeatures(t){switch(this.transform=t.transform,this.options.applyTransform&&t.transform&&(this.applyTransform=this.deriveApplyTransform(t)),this.vertexDimension=2,t.hasZ&&this.vertexDimension++,t.hasM&&this.vertexDimension++,t.geometryType){case"point":this.addCoordinate=(e,r,o)=>this.addCoordinatePoint(e,r,o),this.createGeometry=e=>this.createPointGeometry(e);break;case"polygon":this.addCoordinate=(e,r,o)=>this.addCoordinatePolygon(e,r,o),this.createGeometry=e=>this.createPolygonGeometry(e);break;case"polyline":this.addCoordinate=(e,r,o)=>this.addCoordinatePolyline(e,r,o),this.createGeometry=e=>this.createPolylineGeometry(e);break;case"multipoint":this.addCoordinate=(e,r,o)=>this.addCoordinateMultipoint(e,r,o),this.createGeometry=e=>this.createMultipointGeometry(e);break;case"mesh":case"extent":break;default:T(t.geometryType)}}createFeature(){return this.lengths.length=0,this.currentLengthIndex=0,this.previousCoordinate[0]=0,this.previousCoordinate[1]=0,new x(w(),null,new this.AttributesConstructor)}allocateCoordinates(){const t=this.lengths.reduce((e,r)=>e+r,0);this.coordinateBuffer=new Float64Array(t*this.vertexDimension),this.coordinateBufferPtr=0}addLength(t,e,r){this.lengths.length===0&&(this.toAddInCurrentPath=e),this.lengths.push(e)}createPointGeometry(t){const e={type:"point",x:0,y:0,spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM};return e.hasZ&&(e.z=0),e.hasM&&(e.m=0),e}addCoordinatePoint(t,e,r){switch(e=this.applyTransform(this.transform,e,r,0),r){case 0:t.x=e;break;case 1:t.y=e;break;case 2:t.hasZ?t.z=e:t.m=e;break;case 3:t.m=e}}transformPathLikeValue(t,e){let r=0;return e<=1&&(r=this.previousCoordinate[e],this.previousCoordinate[e]+=t),this.applyTransform(this.transform,t,e,r)}addCoordinatePolyline(t,e,r){this.dehydratedAddPointsCoordinate(t.paths,e,r)}addCoordinatePolygon(t,e,r){this.dehydratedAddPointsCoordinate(t.rings,e,r)}addCoordinateMultipoint(t,e,r){r===0&&t.points.push([]);const o=this.transformPathLikeValue(e,r);t.points[t.points.length-1].push(o)}createPolygonGeometry(t){return{type:"polygon",rings:[[]],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}createPolylineGeometry(t){return{type:"polyline",paths:[[]],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}createMultipointGeometry(t){return{type:"multipoint",points:[],spatialReference:t.spatialReference,hasZ:!!t.hasZ,hasM:!!t.hasM}}dehydratedAddPointsCoordinate(t,e,r){r===0&&this.toAddInCurrentPath--==0&&(t.push([]),this.toAddInCurrentPath=this.lengths[++this.currentLengthIndex]-1,this.previousCoordinate[0]=0,this.previousCoordinate[1]=0);const o=this.transformPathLikeValue(e,r),n=t[t.length-1];r===0&&n.push(new Float64Array(this.coordinateBuffer.buffer,this.coordinateBufferPtr*Float64Array.BYTES_PER_ELEMENT,this.vertexDimension)),this.coordinateBuffer[this.coordinateBufferPtr++]=o}deriveApplyTransform(t){const{hasZ:e,hasM:r}=t;return e&&r?F:e?f:r?L:h}}class I{_parseFeatureQuery(t){const e=Z(t.buffer,new D(t.options)),r=p(c({},e),{spatialReference:e.spatialReference.toJSON(),fields:e.fields?e.fields.map(o=>o.toJSON()):void 0});return Promise.resolve(r)}}function N(){return new I}export{N as default};
